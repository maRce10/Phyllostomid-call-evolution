BDcompleta <- merge(Bc1, wi, by = "sound.files", all.y = TRUE)
BDcompleta<-BDcompleta[, c(1:6, 15:20, 7:14)]
names(BDcompleta)
BDcompleta$Time.expansion.1 <- NULL
sapply(BDcompleta, anyNA)
sapply(BDcompleta, function(x) sum(is.na(x)))
sapply(Bc, function(x) sum(is.na(x)))
sapply(BDcompleta, function(x) sum(is.na(x)))
BDcomp <- merge(Bc1, wi, by = "sound.files", all.y = TRUE)
names(BDcomp)
BDcomp<-BDcomp[, c(1:6, 15:20, 7:14)]
BDcomp$Time.expansion.1 <- NULL
sapply(BDcomp, anyNA)
sapply(BDcomp, function(x) sum(is.na(x)))
table(BDcomp$Fuente, BD$sample.rate)
table(BDcomp$Fuente, BDcomp$sample.rate)
View(BDcomp)
write.csv(BDcomp, "C:/Users/Nazareth/Documents/Datos acusticos/BD/Base de datos consolidada grabaciones phyllostomidos.csv")
write.csv(BDcomp, "C:/Users/Nazareth/Documents/Datos acusticos/BD/Base de datos consolidada grabaciones phyllostomidos.csv")
library(seewave)
w1 <- readWave("C:/Users/Nazareth/Documents/Datos acusticos/Artibeus-jamaicensis_122_Galion-2_14-03-2012_20h06_Â©M-Barataud.wav")
w1
table(BDcomp$Fuente, BDcomp$sample.rate)
x <- "BL"
Y <- BDcomp[BDcomp$Fuente == x, ]
Y <- Y[Y$sample.rate < 250, ]
Y
out <- lapply(unique(BDcomp$Fuente), function(x){
Y <- BDcomp[BDcomp$Fuente == x, ]
Y <- Y[Y$sample.rate < 250, ]
return(Y[, c("sound.files", "sample.rate", "Time.expansion")])
})
names(out) <- unique(BDcomp$Fuente)
out
out[[1]]
out[["BL"]]
names(out)
sapply(out, nrow)
table(BDcomp$Fuente)
rm(list = ls())
gc()
x <- c("warbleR", "Rraven", "readxl")#, "parallel", "MASS", "pbapply", "smacof", "vegan", "pbmcapply", "ggplot2", )
aa <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  {if(!y %in% c("warbleR", "Rraven")) install.packages(y) else devtools::install_github(paste0("maRce10/", y))
}
try(require(y, character.only = T), silent = T)
})
bd <- read_xlsx("Base de datos consolidada grabaciones phyllostomidos.xlsx")
bd <- read_xlsx("Base de datos consolidada grabaciones phyllostomidos.xlsx")
bd <- read_excel("Base de datos consolidada grabaciones phyllostomidos.xlsx")
setwd()
getwd()
list.files()
getwd()
setwd("C:/Users/Nazareth/Dropbox/Phyllostomid call evolution")
bd <- read_excel("Base de datos consolidada grabaciones phyllostomidos.xlsx")
bd <- bd[bd$Util != "No", ]
str(bd)
if (Sys.info()[1] == "Windows")
warbleR_options(wav.path = "C:/Users/Nazareth/Documents/Datos acusticos/", flim = c(1, 193), parallel = 3, wl = 300) else
warbleR_options(wav.path = "~/Desktop/Phyllostomid_recs/grabaciones/converted_sound_files/", flim = c(1, 193),parallel = 3, wl = 300)
wvs <- list.files(path = .Options$warbleR$wav.path, pattern = ".wav$", ignore.case = TRUE)
wvs
bd$sound.files
all(bd$sound.files %in% wvs)
bd$sound.files[!bd$sound.files %in% wvs]
setdiff(bd$sound.files, wvs)
setdiff(wvs, bd$sound.files)
grep("^R|^T|^M|", setdiff(wvs, bd$sound.files), value = TRUE)
setdiff(bd$sound.files, wvs)
grep("^R|^T|^M", setdiff(wvs, bd$sound.files), value = TRUE)
grep("^R|^T|^M00", setdiff(wvs, bd$sound.files), value = TRUE)
setdiff(wvs, bd$sound.files)
setdiff(bd$sound.files, wvs)
grep("^R|^T|^M00", setdiff(wvs, bd$sound.files), value = TRUE)
bd <- read_excel("Base de datos consolidada grabaciones phyllostomidos.xlsx")
bd <- bd[bd$Util != "No", ]
str(bd)
if (Sys.info()[1] == "Windows")
warbleR_options(wav.path = "C:/Users/Nazareth/Documents/Datos acusticos/", flim = c(1, 193), parallel = 3, wl = 300) else
warbleR_options(wav.path = "~/Desktop/Phyllostomid_recs/grabaciones/converted_sound_files/", flim = c(1, 193),parallel = 3, wl = 300)
# lista de archivos wav
wvs <- list.files(path = .Options$warbleR$wav.path, pattern = ".wav$", ignore.case = TRUE)
all(bd$sound.files %in% wvs)
setdiff(bd$sound.files, wvs)
bd <- read_excel("Base de datos consolidada grabaciones phyllostomidos.xlsx")
bd <- bd[bd$Util != "No", ]
if (Sys.info()[1] == "Windows")
warbleR_options(wav.path = "C:/Users/Nazareth/Documents/Datos acusticos/", flim = c(1, 193), parallel = 3, wl = 300) else
warbleR_options(wav.path = "~/Desktop/Phyllostomid_recs/grabaciones/converted_sound_files/", flim = c(1, 193),parallel = 3, wl = 300)
# lista de archivos wav
wvs <- list.files(path = .Options$warbleR$wav.path, pattern = ".wav$", ignore.case = TRUE)
# todos los archivos de sonido de la base de datos tienen un archivo correspondiente?????
all(bd$sound.files %in% wvs)
bd <- read_excel("Base de datos consolidada grabaciones phyllostomidos.xlsx")
bd <- bd[bd$Util != "No", ]
if (Sys.info()[1] == "Windows")
warbleR_options(wav.path = "C:/Users/Nazareth/Documents/Datos acusticos/", flim = c(1, 193), parallel = 3, wl = 300) else
warbleR_options(wav.path = "~/Desktop/Phyllostomid_recs/grabaciones/converted_sound_files/", flim = c(1, 193),parallel = 3, wl = 300)
# lista de archivos wav
wvs <- list.files(path = .Options$warbleR$wav.path, pattern = ".wav$", ignore.case = TRUE)
# todos los archivos de sonido de la base de datos tienen un archivo correspondiente?????
all(bd$sound.files %in% wvs)
bd <- read_excel("Base de datos consolidada grabaciones phyllostomidos.xlsx")
bd <- bd[bd$Util != "No", ]
if (Sys.info()[1] == "Windows")
warbleR_options(wav.path = "C:/Users/Nazareth/Documents/Datos acusticos/", flim = c(1, 193), parallel = 3, wl = 300) else
warbleR_options(wav.path = "~/Desktop/Phyllostomid_recs/grabaciones/converted_sound_files/", flim = c(1, 193),parallel = 3, wl = 300)
# lista de archivos wav
wvs <- list.files(path = .Options$warbleR$wav.path, pattern = ".wav$", ignore.case = TRUE)
# todos los archivos de sonido de la base de datos tienen un archivo correspondiente?????
all(bd$sound.files %in% wvs)
## cuales tienen selecciones?
sls <- list.files("C:/Users/Nazareth/Documents/Datos acusticos/Selecciones")
sls
data.frame(sls, estado.grabacion = "bien")
sls.crrg <- list.files("C:/Users/Nazareth/Documents/Datos acusticos/Selecciones/selecciones que corregir (BL, MB, Macauly)")
df2 <- data.frame(sls.crrg, estado.grabacion = "por corregir")
rbind(df1, df2)
df1 <- data.frame(sls, estado.grabacion = "bien")
df2 <- data.frame(sls.crrg, estado.grabacion = "por corregir")
rbind(df1, df2)
sls.crrg <- list.files("C:/Users/Nazareth/Documents/Datos acusticos/Selecciones/selecciones que corregir (BL, MB, Macauly)")
df1 <- data.frame(sls = sls, estado.grabacion = "bien")
df2 <- data.frame(sls = sls.crrg, estado.grabacion = "por corregir")
rbind(df1, df2)
sls.crrg <- list.files("C:/Users/Nazareth/Documents/Datos acusticos/Selecciones/selecciones que corregir (BL, MB, Macauly)")
sls.stts <- rbind(df1, df2)
sls.stts
View(sls.stts)
bd <- read_excel("Base de datos consolidada grabaciones phyllostomidos.xlsx")
bd <- bd[bd$Util != "No", ]
all(sls.stts$sls %in% bd$nombre.seleccion)
bd <- read_excel("Base de datos consolidada grabaciones phyllostomidos.xlsx")
all(sls.stts$sls %in% bd$nombre.seleccion)
setdiff(sls.stts$sls, bd$nombre.seleccion)
setdiff(bd$nombre.seleccion, sls.stts$sls)
sls.stts$sls2 <- gsub("\\.txt$","", sls.stts$sls)
sls.stts$sls2
all(sls.stts$sls2 %in% bd$nombre.seleccion)
setdiff(sls.stts$sls2, bd$nombre.seleccion)
setdiff(bd$nombre.seleccion, sls.stts$sls2)
rm(list = ls())
gc()
x <- c("warbleR", "Rraven", "readxl")#, "parallel", "MASS", "pbapply", "smacof", "vegan", "pbmcapply", "ggplot2", )
aa <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  {if(!y %in% c("warbleR", "Rraven")) install.packages(y) else devtools::install_github(paste0("maRce10/", y))
}
try(require(y, character.only = T), silent = T)
})
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", "viridis")
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
# source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
# install/ load packages
load_packages(packages =pkgs)
est <- readRDS("./data/processed/curated_extended_selection_table.RDS")
getwd()
est <- readRDS("/home/m/Dropbox/Projects/Phyllostomid call evolution/data/processed/curated_extended_selection_table.RDS")
est <- readRDS("../data/processed/curated_extended_selection_table.RDS")
est
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", "viridis", github = "maRce10/ohun")
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", "viridis", github = "maRce10/ohun")
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
# source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
# install/ load packages
load_packages(packages =pkgs)
feature_reference(est)
est <- resample_est(est, samp.rate = 420)
est
saveRDS(est, "./data/processed/curated_extended_selection_table_420_kHz.RDS")
spectrograms(est[1:10,], collevels = seq(-120, 0, 5), pal = viridis, fast.spec = TRUE, parallel = 10, dest.path = "../output/spectrograms")
spectrograms(est[1:10,], collevels = seq(-120, 0, 5), pal = viridis, fast.spec = TRUE, parallel = 10, dest.path = "./output/spectrograms")
feature_reference(est)
spectrograms(est[1:10,], collevels = seq(-120, 0, 5), pal = viridis, fast.spec = TRUE, parallel = 10, dest.path = "./output/spectrograms", mar = 0.02)
spectrograms(est[1:10,], collevels = seq(-120, 0, 5), pal = viridis, fast.spec = TRUE, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001)
spectrograms(est[1:10,], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001)
spectrograms(est[1:10,], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100)
spectrograms(est[1:5,], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100)
spectrograms(est[1:5,], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 130))
spectrograms(est[1:5,], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 150))
spectrograms(est[1:5,], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210))
spectrograms(est[1:50,], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210))
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210))
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 1000, flim = c(5, 210))
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 1000, flim = c(5, 210))
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 512, flim = c(5, 210))
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 50, flim = c(5, 210))
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 50, flim = c(5, 210))
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 200, flim = c(5, 210))
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 200, flim = c(5, 210))
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210), it = "tiff")
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210),
title.labels = "sound file")
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210),
title.labels = "sound.files")
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210),
title.labels = "sound.files", res = 200)
sapply(as.character(est$sound.files), function(x) if (nchar(x) > 17) paste0(substr(x, 0, 15), "\n", substr(x, 16, nchar(x))) else x)
set.seed(123)
est$tailored_sound_files <- sapply(as.character(est$sound.files), function(x) if (nchar(x) > 17) paste0(substr(x, 0, 15), "\n", substr(x, 16, nchar(x))) else x)
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210),
title.labels = "tailored_sound_files", res = 200)
est$tailored_sound_files <- sapply(as.character(est$sound.files), function(x) if (nchar(x) > 12) paste0(substr(x, 0, 12), "\n", substr(x, 13, nchar(x))) else x)
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210),
title.labels = "tailored_sound_files", res = 200)
est$tailored_sound_files <- sapply(as.character(est$sound.files), function(x) if (nchar(x) > 20) paste0(substr(x, 0, 20), "\n", substr(x, 21, nchar(x))) else x)
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210),
title.labels = "tailored_sound_files", res = 200)
est$tailored_sound_files <- sapply(as.character(est$sound.files), function(x) if (nchar(x) > 25) paste0(substr(x, 0, 25), "\n", substr(x, 26, nchar(x))) else x)
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210),
title.labels = "tailored_sound_files", res = 200)
est$tailored_sound_files <- sapply(as.character(est$sound.files), function(x) if (nchar(x) > 35) paste0(substr(x, 0, 35), "\n", substr(x, 36, nchar(x))) else x)
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210),
title.labels = "tailored_sound_files", res = 200)
est$tailored_sound_files <- sapply(as.character(est$sound.files), function(x) if (nchar(x) > 40) paste0(substr(x, 0, 40), "\n", substr(x, 41, nchar(x))) else x)
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210),
title.labels = "tailored_sound_files", res = 200)
est$tailored_sound_files <- sapply(as.character(est$sound.files), function(x) if (nchar(x) > 80) paste0(substr(x, 0, 80), "\n", substr(x, 81, nchar(x))) else x)
set.seed(123)
est$tailored_sound_files <- sapply(as.character(est$sound.files), function(x) if (nchar(x) > 40) paste0(substr(x, 0, 40), "\n", substr(x, 41, nchar(x))) else x)
est$tailored_sound_files <- sapply(as.character(est$sound.files), function(x) if (nchar(x) > 80) paste0(substr(x, 0, 80), "\n", substr(x, 81, nchar(x))) else x)
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210),
title.labels = "tailored_sound_files", res = 200)
est$tailored_sound_files <- sapply(as.character(est$sound.files), function(x) if (nchar(x) > 40) paste0(substr(x, 0, 40), "\n", substr(x, 41, nchar(x))) else x)
est$tailored_sound_files <- sapply(as.character(est$tailored_sound_files), function(x) if (nchar(x) > 80) paste0(substr(x, 0, 80), "\n", substr(x, 81, nchar(x))) else x)
set.seed(123)
spectrograms(est[sample(1:nrow(est), 20),], collevels = seq(-120, 0, 5), pal = viridis, ovlp = 70, parallel = 10, dest.path = "./output/spectrograms", mar = 0.001, wl = 100, flim = c(5, 210),
title.labels = "tailored_sound_files", res = 200)
View(est)
data("tico")
tico
spectro(tico)
tico2 <- tico
tico2@samp.rate <- tico2@samp.rate/ 2
spectro(tico2)
tico2@samp.rate <- tico2@samp.rate * 2
spectro(tico2)
tico2 <- tico
unique(est$especie)
i <- "Sturnira tildae"
i
nrw <- ncl <- 2
X <- est[est$especie == i, ]
X
nrw <- ncl <- 2
n <- nrow(splt.sls[[i]])
n <- nrow(X)
if(n > 64) n <- 64
if(n > 4) {
nrw <- ncl <- ceiling(sqrt(n))
if(((nrw-1) * ncl) >= n) nrw <- nrw - 1
}
X <- est[est$especie == i, ]
nrw <- ncl <- 2
n <- nrow(X)
if(n > 64) n <- 64
if(n > 4) {
nrw <- ncl <- ceiling(sqrt(n))
if(((nrw-1) * ncl) >= n) nrw <- nrw - 1
}
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = splt.sls[[i]]$especie[1], ovlp = 70, wl = 100,
width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(htc2, trc2, cmc2), hatching = 0, cex = 1.3, fast.spec = T, pal = monitoR::gray.3, img.prefix =  i, rm.axes = TRUE)
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = i, ovlp = 70, wl = 100,
width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(viridis, mako, magma), hatching = 0, cex = 1.3, fast.spec = T, pal = viridis, img.prefix = i, rm.axes = TRUE)
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = i, ovlp = 70, wl = 100, width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(viridis, mako, magma), hatching = 0, cex = 1.3, fast.spec = T, pal = viridis, img.prefix = i, rm.axes = TRUE, flim = c(5, 210))
move.imgs(from = .Options$warbleR$path, to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
move.imgs(from = ".", to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
move_images(from = ".", to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
X <- X[order(X$selec.file), ]
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = i, ovlp = 70, wl = 100, width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(viridis, mako, magma), hatching = 0, cex = 1.3, fast.spec = T, pal = viridis, img.prefix = i, rm.axes = TRUE, flim = c(5, 210))
move_images(from = ".", to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
X <- X[order(X$selec.file), ]
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = i, ovlp = 70, wl = 100, width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(viridis, mako, mako), hatching = 0, cex = 1.3, fast.spec = T, pal = viridis, img.prefix = i, rm.axes = TRUE, flim = c(5, 210))
move_images(from = ".", to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
mako2 <- function(...) mako(alpha = 0.5, begin = 0.3, ...)
mako2 <- function(...) mako(alpha = 0.5, begin = 0.3, ...)
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = i, ovlp = 70, wl = 100, width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(viridis, mako, mako2), hatching = 0, cex = 1.3, fast.spec = T, pal = viridis, img.prefix = i, rm.axes = TRUE, flim = c(5, 210))
move_images(from = ".", to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
# loop to create catalogs
out <- pblapply(unique(est$especie), function(i)
{
X <- est[est$especie == i, ]
nrw <- ncl <- 2
n <- nrow(X)
if(n > 64) n <- 64
if(n > 4) {
nrw <- ncl <- ceiling(sqrt(n))
if(((nrw-1) * ncl) >= n) nrw <- nrw - 1
}
X <- X[order(X$selec.file), ]
mako2 <- function(...) mako(alpha = 0.5, begin = 0.3, ...)
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = i, ovlp = 70, wl = 100, width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(viridis, mako, mako2), hatching = 0, cex = 1.3, fast.spec = T, pal = viridis, img.prefix = i, rm.axes = TRUE, flim = c(5, 210))
move_images(from = ".", to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
}
# loop to create catalogs
out <- pblapply(unique(est$especie), function(i){
X <- est[est$especie == i, ]
nrw <- ncl <- 2
n <- nrow(X)
if(n > 64) n <- 64
if(n > 4) {
nrw <- ncl <- ceiling(sqrt(n))
if(((nrw-1) * ncl) >= n) nrw <- nrw - 1
}
X <- X[order(X$selec.file), ]
mako2 <- function(...) mako(alpha = 0.5, begin = 0.3, ...)
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = i, ovlp = 70, wl = 100, width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(viridis, mako, mako2), hatching = 0, cex = 1.3, fast.spec = T, pal = viridis, img.prefix = i, rm.axes = TRUE, flim = c(5, 210))
move_images(from = ".", to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
}
)
# loop to create catalogs
out <- pbapply::pblapply(unique(est$especie), function(i){
X <- est[est$especie == i, ]
nrw <- ncl <- 2
n <- nrow(X)
if(n > 64) n <- 64
if(n > 4) {
nrw <- ncl <- ceiling(sqrt(n))
if(((nrw-1) * ncl) >= n) nrw <- nrw - 1
}
X <- X[order(X$selec.file), ]
mako2 <- function(...) mako(alpha = 0.5, begin = 0.3, ...)
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = i, ovlp = 70, wl = 100, width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(viridis, mako, mako2), hatching = 0, cex = 1.3, fast.spec = T, pal = viridis, img.prefix = i, rm.axes = TRUE, flim = c(5, 210))
move_images(from = ".", to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
}
)
sp <- spectro_analysis(est, wl = 100, parallel = 20)
sp <- spectro_analysis(est[1:100, ], wl = 100, parallel = 20)
sp
anyDuplicated(est$selec)
est$especie[est$selec == 451,]
est$especie[est$selec == 451]
View(sp)
est
table(est$especie)
summary(table(est$especie))
mean(table(est$especie))
sd(table(est$especie))
range(table(est$especie))
est <- readRDS("./data/processed/curated_extended_selection_table_420_kHz.RDS")
# loop to create catalogs
out <- pbapply::pblapply(unique(est$especie), function(i){
X <- est[est$especie == i, ]
nrw <- ncl <- 2
n <- nrow(X)
if(n > 64) n <- 64
if(n > 4) {
nrw <- ncl <- ceiling(sqrt(n))
if(((nrw-1) * ncl) >= n) nrw <- nrw - 1
}
X <- X[order(X$selec.file), ]
mako2 <- function(...) mako(alpha = 0.5, begin = 0.3, ...)
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = i, ovlp = 70, wl = 100, width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(viridis, mako, mako2), hatching = 0, cex = 1.3, fast.spec = T, pal = viridis, img.prefix = i, rm.axes = TRUE, flim = c(5, 210))
move_images(from = ".", to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
}
)
est <- readRDS("D:/JORGE/DB/Dropbox/Jorge Elizondo/Phyllostomid call evolution/data/processed/curated_extended_selection_table_420_kHz.RDS")
# loop to create catalogs
out <- pbapply::pblapply(unique(est$especie), function(i){
X <- est[est$especie == i, ]
nrw <- ncl <- 2
n <- nrow(X)
if(n > 64) n <- 64
if(n > 4) {
nrw <- ncl <- ceiling(sqrt(n))
if(((nrw-1) * ncl) >= n) nrw <- nrw - 1
}
X <- X[order(X$selec.file), ]
mako2 <- function(...) mako(alpha = 0.5, begin = 0.3, ...)
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = i, ovlp = 70, wl = 100, width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(viridis, mako, mako2), hatching = 0, cex = 1.3, fast.spec = T, pal = viridis, img.prefix = i, rm.axes = TRUE, flim = c(5, 210))
move_images(from = ".", to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
}
)
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", "viridis", github = "maRce10/ohun")
source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
# install/ load packages
load_packages(packages =pkgs)
# install/ load packages
load_packages(packages =pkgs)
knitr::opts_knit$set(root.dir = "..")
est <- readRDS("D:/JORGE/DB/Dropbox/Jorge Elizondo/Phyllostomid call evolution/data/processed/curated_extended_selection_table_420_kHz.RDS")
# loop to create catalogs
out <- pbapply::pblapply(unique(est$especie), function(i){
X <- est[est$especie == i, ]
nrw <- ncl <- 2
n <- nrow(X)
if(n > 64) n <- 64
if(n > 4) {
nrw <- ncl <- ceiling(sqrt(n))
if(((nrw-1) * ncl) >= n) nrw <- nrw - 1
}
X <- X[order(X$selec.file), ]
mako2 <- function(...) mako(alpha = 0.5, begin = 0.3, ...)
catalog(X = X, nrow = nrw, ncol = ncl, same.time.scale = T, mar = 0.001, res = 100, group.tag = "selec.file", pb = FALSE, sub.legend = T, spec.mar = 1, labels = c("selec.file", "selec"), max.group.cols = 3, title = i, ovlp = 70, wl = 100, width = 10 * 2.3, height = 5 * 2.5, tag.pal = list(viridis, mako, mako2), hatching = 0, cex = 1.3, fast.spec = T, pal = viridis, img.prefix = i, rm.axes = TRUE, flim = c(5, 210))
move_images(from = ".", to = "./output/catalogs", overwrite = TRUE, cut = TRUE, pb = FALSE)
}
)
curated_extended_selection_table_420_kHz <- readRDS("D:/JORGE/DB/Dropbox/Jorge Elizondo/Phyllostomid call evolution/data/processed/curated_extended_selection_table_420_kHz.RDS")
View(curated_extended_selection_table_420_kHz)
# github packages must include user name ("user/package")
# knitr is require for creating html/pdf/word reports
# kableExtra is used to print pretty formatted tables
# formatR is used for soft-wrapping code
# klippy is used for adding a copy button to each code block
pkgs <- c("remotes", "kableExtra", "knitr", "formatR", "rprojroot", github = "maRce10/warbleR", "viridis", github = "maRce10/ohun", github = "maRce10/Rraven")
#source("~/Dropbox/R_package_testing/sketchy/R/load_packages.R")
source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
# install/ load packages
load_packages(packages =pkgs)
knitr::opts_knit$set(root.dir = "..")
est <- readRDS("./data/processed/curated_extended_selection_table_420_kHz.RDS")
af <- spectro_analysis(est2, parallel = 22, ovlp = 70, wl = 100)
af <- spectro_analysis(est, parallel = 22, ovlp = 70, wl = 100)
gc()
phy <- ape::read.tree("./deprecated/Datos Rabosky/treePL_ML/chiroptera.no_outgroups.absolute.tre")
library(ape)
install.packages(ape)
install.packages("ape")
phy <- ape::read.tree("./deprecated/Datos Rabosky/treePL_ML/chiroptera.no_outgroups.absolute.tre")
phy$tip.label
est$species <- gsub(" ", "_", est$especie)
dat_spp <- unique(est$species)
setdiff(phy$tip.label, dat_spp)
setdiff(dat_spp, phy$tip.label)
"Dermanura_cinerea" %in% phy$tip.label
which(sapply(phy$tip.label, function(x) "Dermanura" %in% x))
res <- lapply(phy$tip.label, function(x) grep("Dermanura",x))
res
View(res)
res <- unlist(lapply(phy$tip.label, function(x) grep("Dermanura",x, value = TRUE)))
res
phy2 <- ape::read.tree("./deprecated/Datos Rabosky/treePL_ML/chiroptera.rooted.dated.tre")
setdiff(dat_spp, phy2$tip.label)
setdiff(dat_spp, phy$tip.label)
res <- unlist(lapply(phy$tip.label, function(x) grep("Glossophaga",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("Artibeus",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("caudifer",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("bogotensis",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("cinereus",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("cinerea",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("gnoma",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("watsoni",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("Diaemus",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("lonchophylla",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("concava",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("spurrelli",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("Lonchophylla",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("Lophostoma",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("Mycronycteris",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("Micronycteris",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("platyrrhinus",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("Platyrrhinus",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("Sturnira",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("Sturnira_lilium",x, value = TRUE)))
res
res <- unlist(lapply(phy$tip.label, function(x) grep("nicefori",x, value = TRUE)))
res
"Anoura_caudifera" %in% est$especie
"Anoura caudifera" %in% est$especie
